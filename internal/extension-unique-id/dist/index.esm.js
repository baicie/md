import { findChildren as e, getChangedRanges as n, findChildrenInRange as o, combineTransactionSteps as r, Extension as t } from "@tiptap/core";
import { Slice as a, Fragment as i } from "@tiptap/pm/model";
import { PluginKey as d, Plugin as s } from "@tiptap/pm/state";
import { v4 as p } from "uuid";
function u(t){return function(t,e=JSON.stringify){const r={};return t.filter((t=>{const n=e(t);return!Object.prototype.hasOwnProperty.call(r,n)&&(r[n]=!0)}))}(t.filter(((e,r)=>t.indexOf(e)!==r)))}const l=t.create({name:"uniqueID",priority:1e4,addOptions:()=>({attributeName:"id",types:[],generateID:()=>p(),filterTransaction:null}),addGlobalAttributes(){return[{types:this.options.types,attributes:{[this.options.attributeName]:{default:null,parseHTML:t=>t.getAttribute(`data-${this.options.attributeName}`),renderHTML:t=>t[this.options.attributeName]?{[`data-${this.options.attributeName}`]:t[this.options.attributeName]}:{}}}}]},onCreate(){if(this.editor.extensionManager.extensions.find((t=>"collaboration"===t.name)))return;const{view:t,state:r}=this.editor,{tr:n,doc:o}=r,{types:a,attributeName:i,generateID:s}=this.options;e(o,(t=>a.includes(t.type.name)&&null===t.attrs[i])).forEach((({node:t,pos:e})=>{n.setNodeMarkup(e,void 0,{...t.attrs,[i]:s()})})),n.setMeta("addToHistory",!1),t.dispatch(n)},addProseMirrorPlugins(){let t=null,e=!1;return[new s({key:new d("uniqueID"),appendTransaction:(t,e,a)=>{const i=t.some((t=>t.docChanged))&&!e.doc.eq(a.doc),s=this.options.filterTransaction&&t.some((t=>{var e,r;return!(null===(r=(e=this.options).filterTransaction)||void 0===r?void 0:r.call(e,t))})),d=t.find((t=>t.getMeta("y-sync$")));if(d)return;if(!i||s)return;const{tr:p}=a,{types:l,attributeName:c,generateID:m}=this.options,f=r(e.doc,t),{mapping:v}=f;return n(f).forEach((({newRange:t})=>{const e=o(a.doc,t,(t=>l.includes(t.type.name))),r=e.map((({node:t})=>t.attrs[c])).filter((t=>null!==t));e.forEach((({node:t,pos:n},o)=>{var a;const i=null===(a=p.doc.nodeAt(n))||void 0===a?void 0:a.attrs[c];if(null===i)return void p.setNodeMarkup(n,void 0,{...t.attrs,[c]:m()});const s=e[o+1];if(s&&0===t.content.size){if(p.setNodeMarkup(s.pos,void 0,{...s.node.attrs,[c]:i}),r[o+1]=i,s.node.attrs[c])return;const e=m();return p.setNodeMarkup(n,void 0,{...t.attrs,[c]:e}),r[o]=e,p}const d=u(r),{deleted:l}=v.invert().mapResult(n);l&&d.includes(i)&&p.setNodeMarkup(n,void 0,{...t.attrs,[c]:m()})}))})),p.steps.length?(p.setStoredMarks(a.tr.storedMarks),p):void 0},view(e){const r=r=>{var n;t=(null===(n=e.dom.parentElement)||void 0===n?void 0:n.contains(r.target))?e.dom.parentElement:null};return window.addEventListener("dragstart",r),{destroy(){window.removeEventListener("dragstart",r)}}},props:{handleDOMEvents:{drop:(r,n)=>{var o,a;return t===r.dom.parentElement&&"copyMove"!==(null===(o=n.dataTransfer)||void 0===o?void 0:o.effectAllowed)&&"copy"!==(null===(a=n.dataTransfer)||void 0===a?void 0:a.effectAllowed)||(t=null,e=!0),!1},paste:()=>(e=!0,!1)},transformPasted:t=>{if(!e)return t;const{types:r,attributeName:n}=this.options,o=t=>{const e=[];return t.forEach((t=>{if(t.isText)return void e.push(t);if(!r.includes(t.type.name))return void e.push(t.copy(o(t.content)));const a=t.type.create({...t.attrs,[n]:null},o(t.content),t.marks);e.push(a)})),i.from(e)};return e=!1,new a(o(t.content),t.openStart,t.openEnd)}}})]}});export { l as default, l as UniqueID };

